openapi: 3.0.3
info:
  title: Sklad API
  version: 1.0.0
  description: |
    Машиночитаемая спецификация API для склада. Использует аутентификацию Laravel Sanctum через Bearer токен.
servers:
  - url: http://localhost:8000/api
    description: Локальный сервер разработки
tags:
  - name: Auth
  - name: Products
  - name: Sales
  - name: Stock
  - name: Requests
  - name: Users
  - name: Companies
  - name: Warehouses
  - name: ProductTemplates
security:
  - bearerAuth: []
paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Регистрация
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        '201':
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/User' }
                  token: { type: string }
        '422': { $ref: '#/components/responses/ValidationError' }

  /auth/login:
    post:
      tags: [Auth]
      summary: Вход
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        '200':
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/User' }
                  token: { type: string }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/logout:
    post:
      tags: [Auth]
      summary: Выход
      responses:
        '200': { $ref: '#/components/responses/MessageOk' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/me:
    get:
      tags: [Auth]
      summary: Текущий пользователь
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/profile:
    put:
      tags: [Auth]
      summary: Обновление профиля
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Профиль обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  user: { $ref: '#/components/schemas/User' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '422': { $ref: '#/components/responses/ValidationError' }

  /products:
    get:
      tags: [Products]
      summary: Список товаров
      parameters:
        - { $ref: '#/components/parameters/page' }
        - { $ref: '#/components/parameters/per_page' }
        - name: search
          in: query
          schema: { type: string }
        - name: warehouse_id
          in: query
          schema: { type: integer }
        - name: template_id
          in: query
          schema: { type: integer }
        - name: producer
          in: query
          schema: { type: string }
        - name: in_stock
          in: query
          schema: { type: boolean }
        - name: low_stock
          in: query
          schema: { type: boolean }
        - name: active
          in: query
          schema: { type: boolean }
        - name: has_correction
          in: query
          schema: { type: boolean }
          description: 'Показать только товары с уточнениями'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedProducts' }
    post:
      tags: [Products]
      summary: Создать товар
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateProductRequest' }
      responses:
        '201':
          description: Создано
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: '#/components/schemas/Product' }
        '422': { $ref: '#/components/responses/ValidationError' }

  /products/stats:
    get:
      tags: [Products]
      summary: Статистика товаров
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductStats' }

  /products/popular:
    get:
      tags: [Products]
      summary: Популярные товары
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        total_sales: { type: integer }
                        total_revenue: { type: string }

  /products/export:
    get:
      tags: [Products]
      summary: Экспорт товаров
      parameters:
        - { $ref: '#/components/parameters/page' }
        - { $ref: '#/components/parameters/per_page' }
        - name: search

  /stocks:
    get:
      tags: [Stock]
      summary: Список остатков (агрегированные данные)
      parameters:
        - { $ref: '#/components/parameters/page' }
        - { $ref: '#/components/parameters/per_page' }
        - name: warehouse_id
          in: query
          schema: { type: integer }
          description: Фильтр по складу
        - name: producer
          in: query
          schema: { type: string }
          description: Фильтр по производителю
        - name: in_stock
          in: query
          schema: { type: boolean }
          description: Только с остатками
        - name: low_stock
          in: query
          schema: { type: boolean }
          description: Заканчивается (≤10)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedStocks' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /products/export:
    get:
      tags: [Products]
      summary: Экспорт товаров
      parameters:
        - { $ref: '#/components/parameters/page' }
        - { $ref: '#/components/parameters/per_page' }
        - name: search
          in: query
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/ProductExportRow' }
                  total: { type: integer }

  /products/{id}:
    get:
      tags: [Products]
      summary: Товар по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Products]
      summary: Обновить товар
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateProductRequest' }
      responses:
        '200': { description: OK }
        '422': { $ref: '#/components/responses/ValidationError' }
    delete:
      tags: [Products]
      summary: Удалить товар
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { $ref: '#/components/responses/MessageOk' }

  /products/{id}/correction:
    post:
      tags: [Products]
      summary: Добавить уточнение к товару
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [correction]
              properties:
                correction: 
                  type: string
                  minLength: 10
                  maxLength: 1000
                  description: 'Текст уточнения'
      responses:
        '200': 
          description: Уточнение добавлено
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  data: { $ref: '#/components/schemas/Product' }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/ValidationError' }
    delete:
      tags: [Products]
      summary: Удалить уточнение у товара
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': 
          description: Уточнение удалено
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  data: { $ref: '#/components/schemas/Product' }
        '404': { $ref: '#/components/responses/NotFound' }

  /sales:
    get:
      tags: [Sales]
      summary: Список продаж
      parameters:
        - { $ref: '#/components/parameters/page' }
        - { $ref: '#/components/parameters/per_page' }
        - name: search
          in: query
          schema: { type: string }
        - name: warehouse_id
          in: query
          schema: { type: integer }
        - name: payment_status
          in: query
          schema: { type: string }
        - name: delivery_status
          in: query
          schema: { type: string }
        - name: payment_method
          in: query
          schema: { type: string }
        - name: date_from
          in: query
          schema: { type: string, format: date }
        - name: date_to
          in: query
          schema: { type: string, format: date }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaginatedSales' }
    post:
      tags: [Sales]
      summary: Создать продажу
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateSaleRequest' }
      responses:
        '201': { description: Создано }
        '400': { description: Неверные данные }
        '422': { $ref: '#/components/responses/ValidationError' }

  /sales/{id}:
    get:
      tags: [Sales]
      summary: Продажа по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Sales]
      summary: Обновить продажу
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateSaleRequest' }
      responses:
        '200': { description: OK }
    delete:
      tags: [Sales]
      summary: Удалить продажу
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { $ref: '#/components/responses/MessageOk' }

  /sales/{id}/process:
    post:
      tags: [Sales]
      summary: Оформить продажу
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Оформлено }
        '400': { description: Недостаточный остаток }

  /sales/{id}/cancel:
    post:
      tags: [Sales]
      summary: Отменить продажу
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Отменено }

  /sales/stats:
    get:
      tags: [Sales]
      summary: Статистика продаж
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SalesStats' } } } }

  /sales/export:
    get:
      tags: [Sales]
      summary: Экспорт продаж
      responses:
        '200': { description: OK }

  /requests:
    get:
      tags: [Requests]
      summary: Список запросов
      parameters:
        - { $ref: '#/components/parameters/page' }
        - { $ref: '#/components/parameters/per_page' }
        - name: status
          in: query
          schema: { type: string }
        - name: priority
          in: query
          schema: { type: string, enum: [low, normal, high, urgent] }
        - name: user_id
          in: query
          schema: { type: integer }
        - name: warehouse_id
          in: query
          schema: { type: integer }
        - name: product_template_id
          in: query
          schema: { type: integer }
      responses:
        '200': { description: OK }
    post:
      tags: [Requests]
      summary: Создать запрос
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateRequestRequest' }
      responses:
        '201': { description: Создано }

  /requests/{id}:
    get:
      tags: [Requests]
      summary: Запрос по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Requests]
      summary: Обновить запрос
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateRequestRequest' }
      responses:
        '200': { description: OK }
    delete:
      tags: [Requests]
      summary: Удалить запрос
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { $ref: '#/components/responses/MessageOk' }

  /requests/{id}/process:
    post:
      tags: [Requests]
      summary: Обработать запрос
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /requests/{id}/reject:
    post:
      tags: [Requests]
      summary: Отклонить запрос
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /users:
    get:
      tags: [Users]
      summary: Список пользователей
      parameters:
        - { $ref: '#/components/parameters/page' }
        - { $ref: '#/components/parameters/per_page' }
        - name: role
          in: query
          schema: { type: string }
        - name: company_id
          in: query
          schema: { type: integer }
        - name: warehouse_id
          in: query
          schema: { type: integer }
        - name: is_blocked
          in: query
          schema: { type: boolean }
        - name: search
          in: query
          schema: { type: string }
      responses:
        '200': { description: OK }
    post:
      tags: [Users]
      summary: Создать пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateUserRequest' }
      responses:
        '201': { description: Создано }

  /users/{id}:
    get:
      tags: [Users]
      summary: Пользователь по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Users]
      summary: Обновить пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateUserRequest' }
      responses:
        '200': { description: OK }
    delete:
      tags: [Users]
      summary: Удалить пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { $ref: '#/components/responses/MessageOk' }

  /users/{id}/block:
    post:
      tags: [Users]
      summary: Заблокировать пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /users/{id}/unblock:
    post:
      tags: [Users]
      summary: Разблокировать пользователя
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /users/profile:
    get:
      tags: [Users]
      summary: Профиль текущего пользователя
      responses:
        '200': { description: OK }
    put:
      tags: [Users]
      summary: Обновить профиль текущего пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateProfileRequest' }
      responses:
        '200': { description: OK }

  /users/stats:
    get:
      tags: [Users]
      summary: Статистика пользователей
      responses:
        '200': { description: OK }

  /companies:
    get:
      tags: [Companies]
      summary: Список компаний
      parameters:
        - { $ref: '#/components/parameters/page' }
        - { $ref: '#/components/parameters/per_page' }
        - name: is_active
          in: query
          schema: { type: boolean }
        - name: search
          in: query
          schema: { type: string }
        - name: sort
          in: query
          schema: { type: string }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc] }
      responses:
        '200': { description: OK }
    post:
      tags: [Companies]
      summary: Создать компанию
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateCompanyRequest' }
      responses:
        '201': { description: Создано }
        '422': { $ref: '#/components/responses/ValidationError' }

  /companies/{id}:
    get:
      tags: [Companies]
      summary: Компания по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Companies]
      summary: Обновить компанию
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateCompanyRequest' }
      responses:
        '200': { description: OK }
        '422': { $ref: '#/components/responses/ValidationError' }
    delete:
      tags: [Companies]
      summary: Удалить компанию
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { $ref: '#/components/responses/MessageOk' }
        '400': { $ref: '#/components/responses/CompanyDeleteError' }

  /companies/{id}/archive:
    post:
      tags: [Companies]
      summary: Архивировать компанию
      description: Архивирует компанию вместо удаления. Архивированная компания не отображается в обычных списках, но сохраняет все данные и связи.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { $ref: '#/components/responses/CompanyArchiveSuccess' }
        '400': { $ref: '#/components/responses/CompanyArchiveError' }
        '404': { $ref: '#/components/responses/NotFound' }

  /companies/{id}/restore:
    post:
      tags: [Companies]
      summary: Восстановить компанию из архива
      description: Восстанавливает компанию из архива, делая её снова активной.
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { $ref: '#/components/responses/CompanyRestoreSuccess' }
        '400': { $ref: '#/components/responses/CompanyRestoreError' }
        '404': { $ref: '#/components/responses/NotFound' }

  /companies/{id}/warehouses:
    get:
      tags: [Companies]
      summary: Склады компании
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
        - { $ref: '#/components/parameters/page' }
        - { $ref: '#/components/parameters/per_page' }
        - name: is_active
          in: query
          schema: { type: boolean }
        - name: search
          in: query
          schema: { type: string }
        - name: sort
          in: query
          schema: { type: string }
        - name: order
          in: query
          schema: { type: string, enum: [asc, desc] }
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFound' }

  /warehouses:
    get:
      tags: [Warehouses]
      summary: Список складов
      parameters:
        - { $ref: '#/components/parameters/page' }
        - { $ref: '#/components/parameters/per_page' }
        - name: company_id
          in: query
          schema: { type: integer }
        - name: is_active
          in: query
          schema: { type: boolean }
        - name: search
          in: query
          schema: { type: string }
      responses:
        '200': { description: OK }
    post:
      tags: [Warehouses]
      summary: Создать склад
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateWarehouseRequest' }
      responses:
        '201': { description: Создано }

  /warehouses/{id}:
    get:
      tags: [Warehouses]
      summary: Склад по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Warehouses]
      summary: Обновить склад
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateWarehouseRequest' }
      responses:
        '200': { description: OK }
    delete:
      tags: [Warehouses]
      summary: Удалить склад
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { $ref: '#/components/responses/MessageOk' }

  /warehouses/{id}/stats:
    get:
      tags: [Warehouses]
      summary: Статистика склада
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /warehouses/{id}/products:
    get:
      tags: [Warehouses]
      summary: Товары склада
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /warehouses/{id}/employees:
    get:
      tags: [Warehouses]
      summary: Сотрудники склада
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /warehouses/{id}/activate:
    post:
      tags: [Warehouses]
      summary: Активировать склад
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /warehouses/{id}/deactivate:
    post:
      tags: [Warehouses]
      summary: Деактивировать склад
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /warehouses/stats:
    get:
      tags: [Warehouses]
      summary: Статистика всех складов
      responses:
        '200': { description: OK }

  /product-templates:
    get:
      tags: [ProductTemplates]
      summary: Список шаблонов товаров
      parameters:
        - { $ref: '#/components/parameters/page' }
        - { $ref: '#/components/parameters/per_page' }
        - name: is_active
          in: query
          schema: { type: boolean }
        - name: search
          in: query
          schema: { type: string }
      responses:
        '200': { description: OK }
    post:
      tags: [ProductTemplates]
      summary: Создать шаблон
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateProductTemplateRequest' }
      responses:
        '201': { description: Создано }

  /product-templates/{id}:
    get:
      tags: [ProductTemplates]
      summary: Шаблон по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [ProductTemplates]
      summary: Обновить шаблон
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateProductTemplateRequest' }
      responses:
        '200': { description: OK }
    delete:
      tags: [ProductTemplates]
      summary: Удалить шаблон
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { $ref: '#/components/responses/MessageOk' }

  /product-templates/{id}/activate:
    post:
      tags: [ProductTemplates]
      summary: Активировать шаблон
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /product-templates/{id}/deactivate:
    post:
      tags: [ProductTemplates]
      summary: Деактивировать шаблон
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /product-templates/{id}/test-formula:
    post:
      tags: [ProductTemplates]
      summary: Тест формулы расчета
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                values:
                  type: object
                  additionalProperties: { type: number }
      responses:
        '200': { description: OK }

  /product-templates/{id}/attributes:
    get:
      tags: [ProductTemplates]
      summary: Список атрибутов шаблона
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
    post:
      tags: [ProductTemplates]
      summary: Создать атрибут шаблона
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateTemplateAttributeRequest' }
      responses:
        '201': { description: Создано }

  /product-templates/{id}/attributes/{attributeId}:
    put:
      tags: [ProductTemplates]
      summary: Обновить атрибут шаблона
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
        - name: attributeId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateTemplateAttributeRequest' }
      responses:
        '200': { description: OK }
    delete:
      tags: [ProductTemplates]
      summary: Удалить атрибут шаблона
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
        - name: attributeId
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { $ref: '#/components/responses/MessageOk' }

  /product-templates/{id}/products:
    get:
      tags: [ProductTemplates]
      summary: Товары по шаблону
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }

  /product-templates/units:
    get:
      tags: [ProductTemplates]
      summary: Доступные единицы измерения
      responses:
        '200': { description: OK }

  /product-templates/stats:
    get:
      tags: [ProductTemplates]
      summary: Статистика шаблонов
      responses:
        '200': { description: OK }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    page:
      name: page
      in: query
      schema: { type: integer, minimum: 1 }
      required: false
    per_page:
      name: per_page
      in: query
      schema: { type: integer, minimum: 1, maximum: 200 }
      required: false

  responses:
    Unauthorized:
      description: Не авторизован
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { type: string }
    NotFound:
      description: Не найдено
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { type: string }
    ValidationError:
      description: Ошибка валидации
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { type: string }
              errors:
                type: object
                additionalProperties:
                  type: array
                  items: { type: string }
    MessageOk:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { type: string }
    
    CompanyArchiveSuccess:
      description: Компания успешно архивирована
      content:
        application/json:
          schema:
            type: object
            properties:
              success: { type: boolean, example: true }
              message: { type: string, example: "Компания успешно архивирована" }
              data: { $ref: '#/components/schemas/Company' }
    
    CompanyRestoreSuccess:
      description: Компания успешно восстановлена
      content:
        application/json:
          schema:
            type: object
            properties:
              success: { type: boolean, example: true }
              message: { type: string, example: "Компания успешно восстановлена" }
              data: { $ref: '#/components/schemas/Company' }
    
    CompanyArchiveError:
      description: Ошибка архивирования компании
      content:
        application/json:
          schema:
            type: object
            properties:
              success: { type: boolean, example: false }
              message: { type: string, example: "Компания уже архивирована" }
    
    CompanyRestoreError:
      description: Ошибка восстановления компании
      content:
        application/json:
          schema:
            type: object
            properties:
              success: { type: boolean, example: false }
              message: { type: string, example: "Компания не архивирована" }
    
    CompanyDeleteError:
      description: Нельзя удалить компанию с привязанными складами или сотрудниками
      content:
        application/json:
          schema:
            type: object
            properties:
              success: { type: boolean, example: false }
              message: { type: string, example: "Нельзя удалить компанию с привязанными складами или сотрудниками. Архивируйте или удалите связанные записи." }
              details:
                type: object
                properties:
                  warehouses_count: { type: integer, example: 2 }
                  employees_count: { type: integer, example: 5 }
                  suggestion: { type: string, example: "Используйте POST /api/companies/14/archive для архивирования" }

  schemas:
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        username: { type: string, nullable: true }
        email: { type: string, format: email }
        role: { type: string }
        company_id: { type: integer, nullable: true }
        warehouse_id: { type: integer, nullable: true }
        is_blocked: { type: boolean, nullable: true }

    UpdateProfileRequest:
      type: object
      properties:
        name: { type: string }
        username: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        password: { type: string, format: password }
        password_confirmation: { type: string, format: password }
        current_password: { type: string, format: password }
        new_password: { type: string, format: password }

    Company:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        legal_address: { type: string, nullable: true }
        postal_address: { type: string, nullable: true }
        phone_fax: { type: string, nullable: true }
        general_director: { type: string, nullable: true }
        email: { type: string, format: email, nullable: true }
        inn: { type: string, nullable: true }
        kpp: { type: string, nullable: true }
        ogrn: { type: string, nullable: true }
        bank: { type: string, nullable: true }
        account_number: { type: string, nullable: true }
        correspondent_account: { type: string, nullable: true }
        bik: { type: string, nullable: true }
        employees_count: { type: integer, nullable: true, description: 'Количество сотрудников' }
        warehouses_count: { type: integer, nullable: true, description: 'Количество складов' }
        is_archived: { type: boolean }
        archived_at: { type: string, format: date-time, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    CreateCompanyRequest:
      type: object
      required: [name]
      properties:
        name: { type: string, maxLength: 255, description: "Название компании" }
        legal_address: { type: string, maxLength: 500, nullable: true, description: "Юридический адрес" }
        postal_address: { type: string, maxLength: 500, nullable: true, description: "Почтовый адрес" }
        phone_fax: { type: string, maxLength: 100, nullable: true, description: "Телефон/факс" }
        general_director: { type: string, maxLength: 255, nullable: true, description: "Генеральный директор" }
        email: { type: string, format: email, maxLength: 255, nullable: true, description: "Email компании" }
        inn: { type: string, maxLength: 12, nullable: true, description: "ИНН" }
        kpp: { type: string, maxLength: 9, nullable: true, description: "КПП" }
        ogrn: { type: string, maxLength: 15, nullable: true, description: "ОГРН" }
        bank: { type: string, maxLength: 255, nullable: true, description: "Банк" }
        account_number: { type: string, maxLength: 20, nullable: true, description: "Расчетный счет" }
        correspondent_account: { type: string, maxLength: 20, nullable: true, description: "Корреспондентский счет" }
        bik: { type: string, maxLength: 9, nullable: true, description: "БИК" }
        employees_count: { type: integer, nullable: true, description: "Количество сотрудников" }
        warehouses_count: { type: integer, nullable: true, description: "Количество складов" }

    UpdateCompanyRequest:
      type: object
      properties:
        name: { type: string, maxLength: 255, nullable: true, description: "Название компании" }
        legal_address: { type: string, maxLength: 500, nullable: true, description: "Юридический адрес" }
        postal_address: { type: string, maxLength: 500, nullable: true, description: "Почтовый адрес" }
        phone_fax: { type: string, maxLength: 100, nullable: true, description: "Телефон/факс" }
        general_director: { type: string, maxLength: 255, nullable: true, description: "Генеральный директор" }
        email: { type: string, format: email, maxLength: 255, nullable: true, description: "Email компании" }
        inn: { type: string, maxLength: 12, nullable: true, description: "ИНН" }
        kpp: { type: string, maxLength: 9, nullable: true, description: "КПП" }
        ogrn: { type: string, maxLength: 15, nullable: true, description: "ОГРН" }
        bank: { type: string, maxLength: 255, nullable: true, description: "Банк" }
        account_number: { type: string, maxLength: 20, nullable: true, description: "Расчетный счет" }
        correspondent_account: { type: string, maxLength: 20, nullable: true, description: "Корреспондентский счет" }
        bik: { type: string, maxLength: 9, nullable: true, description: "БИК" }
        employees_count: { type: integer, nullable: true, description: "Количество сотрудников" }
        warehouses_count: { type: integer, nullable: true, description: "Количество складов" }

    Product:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        description: { type: string, nullable: true }
        quantity: { type: number }
        attributes: { type: object, additionalProperties: true, nullable: true }
        transport_number: { type: string, nullable: true }
        producer: { type: string, nullable: true }
        arrival_date: { type: string, format: date, nullable: true }
        is_active: { type: boolean }
        calculated_volume: { type: number, nullable: true }
        correction: { type: string, nullable: true, description: 'Текст уточнения/коррекции' }
        correction_status: { type: string, nullable: true, enum: [none, correction], description: 'Статус коррекции' }
        document_path: { type: array, items: { type: string }, nullable: true, description: 'Пути к прикрепленным документам' }
        template:
          type: object
          properties:
            id: { type: integer }
        warehouse:
          type: object
          properties:
            id: { type: integer }
        creator:
          type: object
          properties:
            id: { type: integer }

    CreateProductRequest:
      type: object
      required: [product_template_id, warehouse_id, quantity]
      properties:
        product_template_id: { type: integer }
        warehouse_id: { type: integer }
        name: { type: string, description: 'Автоматически формируется из характеристик товара (необязательное)' }
        quantity: { type: number }
        description: { type: string }
        attributes: { type: object, additionalProperties: true, description: 'Характеристики товара (обязательные для выбранного шаблона)' }
        transport_number: { type: string, description: 'Номер транспортного средства' }
        producer: { type: string }
        arrival_date: { type: string, format: date }
        is_active: { type: boolean }
        correction: { type: string, nullable: true, description: 'Текст уточнения/коррекции' }
        correction_status: { type: string, nullable: true, enum: [none, correction], description: 'Статус коррекции' }
        document_path: { type: array, items: { type: string }, nullable: true, description: 'Пути к прикрепленным документам' }

    UpdateProductRequest:
      allOf:
        - $ref: '#/components/schemas/CreateProductRequest'

    ProductExportRow:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        quantity: { type: number }
        transport_number: { type: string, nullable: true }
        calculated_volume: { type: number }
        warehouse: { type: string }
        template: { type: string }
        arrival_date: { type: string, format: date }
        is_active: { type: string, description: 'Да/Нет' }

    PaginatedProducts:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Product' }
        links: { $ref: '#/components/schemas/PaginationLinks' }
        meta: { $ref: '#/components/schemas/PaginationMeta' }

    ProductStats:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            total_products: { type: integer }
            active_products: { type: integer }
            in_stock: { type: integer }
            low_stock: { type: integer }
            out_of_stock: { type: integer }
            total_quantity: { type: number }
            total_volume: { type: number }

    Sale:
      type: object
      description: Модель продажи с полной информацией о товаре, клиенте и статусах
      properties:
        id: 
          type: integer
          description: Уникальный идентификатор продажи
        sale_number: 
          type: string
          description: Автоматически сгенерированный номер продажи
          example: "SALE-202508-0001"
        product_id: 
          type: integer
          description: ID товара
        product: 
          type: object
          description: Информация о товаре
          properties: 
            id: { type: integer }
            name: { type: string }
            description: { type: string, nullable: true }
            quantity: { type: number }
        warehouse_id: 
          type: integer
          description: ID склада
        warehouse: 
          type: object
          description: Информация о складе
          properties: 
            id: { type: integer }
            name: { type: string }
        user_id: 
          type: integer
          description: ID пользователя, оформившего продажу
        user: 
          type: object
          description: Информация о пользователе
          properties: 
            id: { type: integer }
            name: { type: string }
        customer_name: 
          type: string
          description: Имя клиента
          example: "Иван Иванов"
        customer_phone: 
          type: string
          nullable: true
          description: Телефон клиента
          example: "+7 (999) 123-45-67"
        customer_email: 
          type: string
          nullable: true
          description: Email клиента
          example: "ivan@example.com"
        customer_address: 
          type: string
          nullable: true
          description: Адрес клиента
        quantity: 
          type: number
          description: Количество проданного товара
          minimum: 1
        unit_price: 
          type: number
          description: Цена за единицу товара
          minimum: 0
        total_price: 
          type: number
          description: Общая стоимость с НДС
          minimum: 0
        price_without_vat: 
          type: number
          description: Цена без НДС
          minimum: 0
        vat_rate: 
          type: number
          description: Ставка НДС в процентах
          default: 20.00
          minimum: 0
          maximum: 100
        vat_amount: 
          type: number
          description: Сумма НДС
          minimum: 0
        currency: 
          type: string
          description: Валюта
          default: "RUB"
          example: "RUB"
        exchange_rate: 
          type: number
          description: Курс обмена валюты
          default: 1.0000
          minimum: 0
        payment_method: 
          type: string
          description: Способ оплаты
          enum: [cash, card, bank_transfer, other]
          example: "cash"
        payment_status: 
          type: string
          description: Статус оплаты
          enum: [pending, paid, partially_paid, cancelled]
          default: "pending"
          example: "pending"
        delivery_status: 
          type: string
          description: Статус доставки
          enum: [pending, in_progress, delivered, cancelled]
          default: "pending"
          example: "pending"
        sale_date: 
          type: string
          format: date
          description: Дата продажи
          example: "2025-08-29"
        delivery_date: 
          type: string
          format: date
          nullable: true
          description: Дата доставки
        notes: 
          type: string
          nullable: true
          description: Дополнительные заметки
        invoice_number: 
          type: string
          nullable: true
          description: Номер счета
        is_active: 
          type: boolean
          description: Статус активности
          default: true
        created_at: 
          type: string
          format: date-time
          description: Дата создания записи
        updated_at: 
          type: string
          format: date-time
          description: Дата последнего обновления

    CreateSaleRequest:
      type: object
      description: Данные для создания новой продажи
      required: [product_id, warehouse_id, customer_name, quantity, unit_price, sale_date]
      properties:
        product_id: 
          type: integer
          description: ID товара для продажи
          example: 1
        warehouse_id: 
          type: integer
          description: ID склада для продажи
          example: 1
        customer_name: 
          type: string
          description: Имя клиента
          maxLength: 255
          example: "Иван Иванов"
        customer_phone: 
          type: string
          nullable: true
          description: Телефон клиента
          maxLength: 255
          example: "+7 (999) 123-45-67"
        customer_email: 
          type: string
          nullable: true
          description: Email клиента
          format: email
          maxLength: 255
          example: "ivan@example.com"
        customer_address: 
          type: string
          nullable: true
          description: Адрес клиента
        quantity: 
          type: integer
          description: Количество товара для продажи
          minimum: 1
          example: 5
        unit_price: 
          type: number
          description: Цена за единицу товара
          minimum: 0
          example: 1000.00
        vat_rate: 
          type: number
          description: Ставка НДС в процентах
          minimum: 0
          maximum: 100
          default: 20.00
          example: 20.00
        payment_method: 
          type: string
          description: Способ оплаты
          enum: [cash, card, bank_transfer, other]
          default: "cash"
          example: "cash"
        payment_status: 
          type: string
          description: Статус оплаты
          enum: [pending, paid, partially_paid, cancelled]
          default: "pending"
          example: "pending"
        delivery_status: 
          type: string
          description: Статус доставки
          enum: [pending, in_progress, delivered, cancelled]
          default: "pending"
          example: "pending"
        sale_date: 
          type: string
          format: date
          description: Дата продажи
          example: "2025-08-29"
        notes: 
          type: string
          nullable: true
          description: Дополнительные заметки
        is_active: 
          type: boolean
          description: Статус активности
          default: true

    UpdateSaleRequest:
      type: object
      description: Данные для обновления существующей продажи
      properties:
        customer_name: 
          type: string
          nullable: true
          description: Имя клиента
          maxLength: 255
        customer_phone: 
          type: string
          nullable: true
          description: Телефон клиента
          maxLength: 255
        customer_email: 
          type: string
          nullable: true
          description: Email клиента
          format: email
          maxLength: 255
        customer_address: 
          type: string
          nullable: true
          description: Адрес клиента
        quantity: 
          type: integer
          nullable: true
          description: Количество товара
          minimum: 1
        unit_price: 
          type: number
          nullable: true
          description: Цена за единицу
          minimum: 0
        vat_rate: 
          type: number
          nullable: true
          description: Ставка НДС в процентах
          minimum: 0
          maximum: 100
        payment_method: 
          type: string
          nullable: true
          description: Способ оплаты
          enum: [cash, card, bank_transfer, other]
        payment_status: 
          type: string
          nullable: true
          description: Статус оплаты
          enum: [pending, paid, partially_paid, cancelled]
        delivery_status: 
          type: string
          nullable: true
          description: Статус доставки
          enum: [pending, in_progress, delivered, cancelled]
        sale_date: 
          type: string
          nullable: true
          format: date
          description: Дата продажи
        delivery_date: 
          type: string
          nullable: true
          format: date
          description: Дата доставки
        notes: 
          type: string
          nullable: true
          description: Дополнительные заметки
        is_active: 
          type: boolean
          nullable: true
          description: Статус активности

    PaginatedSales:
      type: object
      description: Пагинированный список продаж
      properties:
        data:
          type: array
          description: Массив продаж
          items: { $ref: '#/components/schemas/Sale' }
        links: 
          $ref: '#/components/schemas/PaginationLinks'
          description: Ссылки для пагинации
        meta: 
          $ref: '#/components/schemas/PaginationMeta'
          description: Метаинформация о пагинации

    PaginatedStocks:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Stock' }
        links: { $ref: '#/components/schemas/PaginationLinks' }
        meta: { $ref: '#/components/schemas/PaginationMeta' }

    SalesStats:
      type: object
      description: Статистика по продажам
      properties:
        total_sales: 
          type: integer
          description: Общее количество продаж
          example: 150
        paid_sales: 
          type: integer
          description: Количество оплаченных продаж
          example: 120
        pending_payments: 
          type: integer
          description: Количество продаж в ожидании оплаты
          example: 25
        today_sales: 
          type: integer
          description: Количество продаж за сегодня
          example: 8
        month_revenue: 
          type: number
          description: Выручка за текущий месяц
          example: 150000.00
        total_revenue: 
          type: number
          description: Общая выручка
          example: 2500000.00
        total_quantity: 
          type: number
          description: Общее количество проданных товаров
          example: 1500
        average_sale: 
          type: number
          description: Средняя стоимость продажи
          example: 16666.67
        in_delivery: 
          type: integer
          description: Количество продаж в процессе доставки
          example: 5

    Stock:
      type: object
      properties:
        id: { type: string, description: 'Составной ключ для агрегированных данных' }
        product_template_id: { type: integer }
        warehouse_id: { type: integer }
        producer: { type: string }
        name: { type: string, description: 'Наименование товара (шаблон + характеристики)' }
        available_quantity: { type: number, description: 'Доступное количество с учетом продаж' }
        available_volume: { type: number, description: 'Доступный объем с учетом продаж' }
        items_count: { type: integer, description: 'Количество позиций товара' }
        first_arrival: { type: string, format: date, description: 'Дата первого поступления' }
        last_arrival: { type: string, format: date, description: 'Дата последнего поступления' }
        template: { type: object, properties: { id: { type: integer }, name: { type: string } } }
        warehouse: { type: object, properties: { id: { type: integer }, name: { type: string } } }

    Request:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        description: { type: string, nullable: true }
        quantity: { type: number }
        priority: { type: string, enum: [low, normal, high, urgent] }
        status: { type: string }
        warehouse: { type: object, properties: { id: { type: integer } } }
        product_template: { type: object, properties: { id: { type: integer } } }
        user: { type: object, properties: { id: { type: integer } } }

    CreateRequestRequest:
      type: object
      required: [warehouse_id, product_template_id, title, quantity, priority]
      properties:
        warehouse_id: { type: integer }
        product_template_id: { type: integer }
        title: { type: string }
        quantity: { type: number }
        priority: { type: string, enum: [low, normal, high, urgent] }
        description: { type: string }
        status: { type: string }

    UpdateRequestRequest:
      allOf:
        - $ref: '#/components/schemas/CreateRequestRequest'

    Warehouse:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        address: { type: string }
        company_id: { type: integer }
        is_active: { type: boolean }

    CreateWarehouseRequest:
      type: object
      required: [name, address, company_id]
      properties:
        name: { type: string }
        address: { type: string }
        company_id: { type: integer }

    UpdateWarehouseRequest:
      allOf:
        - $ref: '#/components/schemas/CreateWarehouseRequest'

    ProductTemplate:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        unit: { type: string }
        description: { type: string, nullable: true }
        formula: { type: string, nullable: true }
        is_active: { type: boolean }

    CreateProductTemplateRequest:
      type: object
      required: [name, unit]
      properties:
        name: { type: string }
        unit: { type: string }
        description: { type: string }
        formula: { type: string }
        is_active: { type: boolean }

    UpdateProductTemplateRequest:
      allOf:
        - $ref: '#/components/schemas/CreateProductTemplateRequest'

    CreateTemplateAttributeRequest:
      type: object
      required: [name, variable, type]
      properties:
        name: { type: string }
        variable: { type: string, pattern: '^[A-Za-z][A-Za-z0-9_]*$' }
        type: { type: string, enum: [number, text, select] }
        value: {}
        unit: { type: string }
        is_required: { type: boolean }
        is_in_formula: { type: boolean }
        sort_order: { type: integer }

    UpdateTemplateAttributeRequest:
      allOf:
        - $ref: '#/components/schemas/CreateTemplateAttributeRequest'

    PaginationLinks:
      type: object
      properties:
        first: { type: string, nullable: true }
        last: { type: string, nullable: true }
        prev: { type: string, nullable: true }
        next: { type: string, nullable: true }

    PaginationMeta:
      type: object
      properties:
        current_page: { type: integer }
        last_page: { type: integer }
        per_page: { type: integer }
        total: { type: integer }


